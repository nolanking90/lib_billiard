# .github/workflows/build.yml
name: Build

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build
    strategy: 
      matrix: 
        os: 
          - windows-latest
          - macOS-latest
        include:
          - os: windows-latest
            ext: dylib
            buildpath: D:\a\billiard\billiard\target\release\libbilliard.dylib
            outputname: billiards-Win.exe
            sysid: Windows-x86-64
            msiurl: https://files.wolframcdn.com/packages/winget/13.0.0.0/WolframEngine_13.0.0_WIN.msi
            enginedir: WolframEngine
            installcmd: Start-Process "msiexec.exe" -ArgumentList $MSIArguments -Wait -NoNewWindow
          - os: macOS-latest
            ext: dylib
            buildpath: ./target/release/billiard
            outputname: libbilliard-MacOS.dylib
            sysid: MacOSX-x86-64
            msiurl: .
            enginedir: "/Applications/Wolfram Engine.app"
            installcmd: brew install wolfram-engine
    runs-on: ${{ matrix.os }}
    env:
      WOLFRAM_SYSTEM_ID: ${{ matrix.sysid }}
      WOLFRAMENGINE_INSTALL_MSI_DOWNLOAD_URL: ${{ matrix.msiurl }}
      WOLFRAMENGINE_CACHE_KEY: WolframEngine-A
      WOLFRAMENGINE_INSTALLATION_SUBDIRECTORY: ${{ matrix.enginedir }}
      WOLFRAMENGINE_INSTALLATION_DIRECTORY: ${{ matrix.enginedir }}
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with: 
          shared-key: "cached-deps"
      - name: Cache/restore Wolfram Engine install
        id: cache-restore
        uses: actions/cache@v2
        env:
          WOLFRAMENGINE_INSTALLATION_DIRECTORY: '${{ runner.temp }}\${{ env.WOLFRAMENGINE_INSTALLATION_SUBDIRECTORY }}'
        with:
          path: ${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}
          key: wolframengine-${{ env.WOLFRAM_SYSTEM_ID }}-${{ env.WOLFRAMENGINE_CACHE_KEY }}

      - name: Download and install Wolfram Engine
        if: steps.cache-restore.outputs.cache-hit != 'true'
        env:
          WOLFRAMENGINE_INSTALLATION_DIRECTORY: '${{ runner.temp }}\${{ env.WOLFRAMENGINE_INSTALLATION_SUBDIRECTORY }}'
          WOLFRAMENGINE_INSTALL_MSI_PATH: '${{ runner.temp }}\WolframEngine-Install.msi'
          WOLFRAMENGINE_INSTALL_LOG_PATH: '${{ runner.temp }}\WolframEngine-Install.log'
        run: |
          echo 'Downloading Wolfram Engine installer...'
          $msiFile = '${{ env.WOLFRAMENGINE_INSTALL_MSI_PATH }}'
          $logFile = '${{ env.WOLFRAMENGINE_INSTALL_LOG_PATH }}'

          Import-Module BitsTransfer
          Start-BitsTransfer '${{ env.WOLFRAMENGINE_INSTALL_MSI_DOWNLOAD_URL }}' $msiFile
          echo 'Downloaded Wolfram Engine installer.'

          $DataStamp = get-date -Format yyyyMMddTHHmmss
          $MSIArguments = @(
              "/i"
              ('"{0}"' -f $msiFile)
              'INSTALLLOCATION="${{ env.WOLFRAMENGINE_INSTALLATION_DIRECTORY }}"'
              "/qn"
              "/norestart"
              "/L*v"
              $logFile
          )
          echo 'Installing Wolfram Engine...'
          ${{ matrix.installcmd }}
          echo 'Installed Wolfram Engine.'
      - name: Compile
        id: compile
        run: cargo build --release
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.outputname }}
          path: ${{ matrix.buildpath }}
